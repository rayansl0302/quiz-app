{
    "questions": [
      {
        "id": 1,
        "questionText": "O que é uma variável em Python?",
        "options": [
          { "id": 1, "text": "Uma função", "isCorrect": false },
          { "id": 2, "text": "Um tipo de dado", "isCorrect": false },
          { "id": 3, "text": "Um identificador para armazenar valores", "isCorrect": true },
          { "id": 4, "text": "Uma constante", "isCorrect": false }
        ],
        "explanation": "Uma variável é um identificador que permite armazenar valores que podem ser alterados durante a execução do programa. Exemplo: x = 10; y = x + 5; # y agora é 15."
      },
      {
        "id": 2,
        "questionText": "Como você define uma função em Python?",
        "options": [
          { "id": 1, "text": "função nome():", "isCorrect": false },
          { "id": 2, "text": "def nome_funcao():", "isCorrect": true },
          { "id": 3, "text": "function nome_funcao():", "isCorrect": false },
          { "id": 4, "text": "fn nome_funcao():", "isCorrect": false }
        ],
        "explanation": "Em Python, uma função é definida usando a palavra-chave \"def\" seguida pelo nome da função e parênteses. Exemplo: def saudacao(): print('Olá, mundo!')"
      },
      {
        "id": 3,
        "questionText": "O que é uma lista em Python?",
        "options": [
          { "id": 1, "text": "Uma coleção ordenada e mutável de itens", "isCorrect": true },
          { "id": 2, "text": "Uma coleção ordenada e imutável de itens", "isCorrect": false },
          { "id": 3, "text": "Uma coleção não ordenada e mutável de itens", "isCorrect": false },
          { "id": 4, "text": "Uma coleção não ordenada e imutável de itens", "isCorrect": false }
        ],
        "explanation": "Uma lista em Python é uma coleção ordenada e mutável de itens que pode conter elementos de diferentes tipos. Exemplo: lista = [1, 2, 3, 'texto']; lista.append(4); # lista agora é [1, 2, 3, 'texto', 4]."
      },
      {
        "id": 4,
        "questionText": "Qual é a saída de print(2 ** 3) em Python?",
        "options": [
          { "id": 1, "text": "5", "isCorrect": false },
          { "id": 2, "text": "6", "isCorrect": false },
          { "id": 3, "text": "8", "isCorrect": true },
          { "id": 4, "text": "9", "isCorrect": false }
        ],
        "explanation": "O operador \"**\" é usado para exponenciação em Python. Portanto, 2 ** 3 significa 2 elevado à potência de 3, que é igual a 8. Exemplo: print(2 ** 3); # Saída: 8."
      },
      {
        "id": 5,
        "questionText": "Qual biblioteca é comumente usada para web scraping em Python?",
        "options": [
          { "id": 1, "text": "numpy", "isCorrect": false },
          { "id": 2, "text": "pandas", "isCorrect": false },
          { "id": 3, "text": "beautifulsoup4", "isCorrect": true },
          { "id": 4, "text": "matplotlib", "isCorrect": false }
        ],
        "explanation": "A biblioteca \"beautifulsoup4\" é comumente usada para web scraping em Python, pois permite a extração de dados de arquivos HTML e XML. Exemplo: from bs4 import BeautifulSoup; soup = BeautifulSoup(html, 'html.parser'); dados = soup.find_all('tag')"
      },
      {
        "id": 6,
        "questionText": "Como você inicializa uma instância do navegador com Selenium em Python?",
        "options": [
          { "id": 1, "text": "browser = selenium.webdriver()", "isCorrect": false },
          { "id": 2, "text": "driver = webdriver.Chrome()", "isCorrect": true },
          { "id": 3, "text": "webdriver = ChromeDriver()", "isCorrect": false },
          { "id": 4, "text": "driver = Selenium.Chrome()", "isCorrect": false }
        ],
        "explanation": "Para inicializar uma instância do navegador com Selenium em Python, você usa \"driver = webdriver.Chrome()\". Exemplo: from selenium import webdriver; driver = webdriver.Chrome(); driver.get('https://www.example.com')"
      },
      {
        "id": 7,
        "questionText": "Como você pode encontrar um elemento por ID usando Selenium em Python?",
        "options": [
          { "id": 1, "text": "element = driver.find_element_by_id(\"id\")", "isCorrect": true },
          { "id": 2, "text": "element = driver.find_element_by_class(\"id\")", "isCorrect": false },
          { "id": 3, "text": "element = driver.get_element_by_id(\"id\")", "isCorrect": false },
          { "id": 4, "text": "element = driver.find_element_by_tag(\"id\")", "isCorrect": false }
        ],
        "explanation": "Para encontrar um elemento por ID usando Selenium em Python, você usa \"element = driver.find_element_by_id(\"id\")\". Exemplo: elemento = driver.find_element_by_id('login-button')"
      },
      {
        "id": 8,
        "questionText": "O que faz o método find_all() do BeautifulSoup?",
        "options": [
          { "id": 1, "text": "Retorna o primeiro elemento que corresponde aos critérios de pesquisa", "isCorrect": false },
          { "id": 2, "text": "Retorna todos os elementos que correspondem aos critérios de pesquisa", "isCorrect": true },
          { "id": 3, "text": "Retorna o número de elementos que correspondem aos critérios de pesquisa", "isCorrect": false },
          { "id": 4, "text": "Remove todos os elementos que correspondem aos critérios de pesquisa", "isCorrect": false }
        ],
        "explanation": "O método \"find_all()\" do BeautifulSoup retorna todos os elementos que correspondem aos critérios de pesquisa fornecidos. Exemplo: tags = soup.find_all('a'); # tags é uma lista de todos os elementos <a>."
      },
      {
        "id": 9,
        "questionText": "O que é uma \"Exception\" em Python?",
        "options": [
          { "id": 1, "text": "Um erro detectado durante a execução do programa", "isCorrect": true },
          { "id": 2, "text": "Uma função que retorna um valor de erro", "isCorrect": false },
          { "id": 3, "text": "Um tipo de variável especial", "isCorrect": false },
          { "id": 4, "text": "Uma biblioteca para manipulação de erros", "isCorrect": false }
        ],
        "explanation": "Uma \"Exception\" em Python é um erro detectado durante a execução do programa, que pode ser tratado usando blocos try-except. Exemplo: try: x = 1 / 0; except ZeroDivisionError as e: print('Erro:', e)"
      },
      {
        "id": 10,
        "questionText": "Como você pode manipular exceções em Python?",
        "options": [
          { "id": 1, "text": "try-except", "isCorrect": true },
          { "id": 2, "text": "try-catch", "isCorrect": false },
          { "id": 3, "text": "do-except", "isCorrect": false },
          { "id": 4, "text": "try-finally", "isCorrect": false }
        ],
        "explanation": "Em Python, você pode manipular exceções usando blocos \"try-except\". Exemplo: try: x = 1 / 0; except ZeroDivisionError: print('Divisão por zero!')"
      },
      {
        "id": 11,
        "questionText": "Qual é a diferença entre uma lista e uma tupla em Python?",
        "options": [
          { "id": 1, "text": "Listas são mutáveis e tuplas são imutáveis", "isCorrect": true },
          { "id": 2, "text": "Listas são imutáveis e tuplas são mutáveis", "isCorrect": false },
          { "id": 3, "text": "Listas e tuplas são mutuamente intercambiáveis", "isCorrect": false },
          { "id": 4, "text": "Listas e tuplas têm a mesma funcionalidade", "isCorrect": false }
        ],
        "explanation": "Listas são mutáveis (podem ser alteradas após a criação), enquanto tuplas são imutáveis (não podem ser alteradas). Exemplo: lista = [1, 2, 3]; lista.append(4); # lista é [1, 2, 3, 4]. Tupla = (1, 2, 3); # Tupla é (1, 2, 3) e não pode ser alterada."
      },
      {
        "id": 12,
        "questionText": "Como você lê um arquivo em Python?",
        "options": [
          { "id": 1, "text": "file.read()", "isCorrect": false },
          { "id": 2, "text": "open(file_path).read()", "isCorrect": true },
          { "id": 3, "text": "file.open(file_path)", "isCorrect": false },
          { "id": 4, "text": "read(file_path)", "isCorrect": false }
        ],
        "explanation": "Você pode ler um arquivo em Python usando a função open() e o método read(). Exemplo: with open('arquivo.txt', 'r') as file: conteudo = file.read(); print(conteudo)"
      },
      {
        "id": 13,
        "questionText": "Como você escreve dados em um arquivo em Python?",
        "options": [
          { "id": 1, "text": "file.write(data)", "isCorrect": false },
          { "id": 2, "text": "open(file_path).write(data)", "isCorrect": true },
          { "id": 3, "text": "write(file_path, data)", "isCorrect": false },
          { "id": 4, "text": "data.write(file_path)", "isCorrect": false }
        ],
        "explanation": "Você pode escrever dados em um arquivo em Python usando a função open() no modo de escrita ('w') e o método write(). Exemplo: with open('arquivo.txt', 'w') as file: file.write('Olá, mundo!')"
      },
      {
        "id": 14,
        "questionText": "O que é um dicionário em Python?",
        "options": [
          { "id": 1, "text": "Uma coleção ordenada de pares chave-valor", "isCorrect": true },
          { "id": 2, "text": "Uma coleção ordenada de valores", "isCorrect": false },
          { "id": 3, "text": "Uma coleção não ordenada de pares chave-valor", "isCorrect": false },
          { "id": 4, "text": "Uma coleção não ordenada de valores", "isCorrect": false }
        ],
        "explanation": "Um dicionário em Python é uma coleção não ordenada de pares chave-valor. Exemplo: dicionario = {'nome': 'João', 'idade': 30}; nome = dicionario['nome']; # nome é 'João'."
      },
      {
        "id": 15,
        "questionText": "Como você acessa um valor em um dicionário em Python?",
        "options": [
          { "id": 1, "text": "dicionario.key", "isCorrect": false },
          { "id": 2, "text": "dicionario[key]", "isCorrect": true },
          { "id": 3, "text": "dicionario.get(key)", "isCorrect": true },
          { "id": 4, "text": "dicionario.get_value(key)", "isCorrect": false }
        ],
        "explanation": "Você pode acessar um valor em um dicionário usando a chave entre colchetes ou o método get(). Exemplo: valor = dicionario['chave']; ou valor = dicionario.get('chave')"
      },
      {
        "id": 16,
        "questionText": "Como você adiciona um item a um dicionário em Python?",
        "options": [
          { "id": 1, "text": "dicionario.add(chave, valor)", "isCorrect": false },
          { "id": 2, "text": "dicionario[chave] = valor", "isCorrect": true },
          { "id": 3, "text": "dicionario.append(chave, valor)", "isCorrect": false },
          { "id": 4, "text": "dicionario.insert(chave, valor)", "isCorrect": false }
        ],
        "explanation": "Para adicionar um item a um dicionário, você usa a sintaxe dicionario[chave] = valor. Exemplo: dicionario['nova_chave'] = 'novo_valor'; # dicionario agora inclui 'nova_chave': 'novo_valor'."
      },
      {
        "id": 17,
        "questionText": "Como você remove um item de um dicionário em Python?",
        "options": [
          { "id": 1, "text": "dicionario.remove(chave)", "isCorrect": false },
          { "id": 2, "text": "dicionario.delete(chave)", "isCorrect": false },
          { "id": 3, "text": "del dicionario[chave]", "isCorrect": true },
          { "id": 4, "text": "dicionario.pop(chave)", "isCorrect": true }
        ],
        "explanation": "Você pode remover um item de um dicionário usando o comando del ou o método pop(). Exemplo: del dicionario['chave']; ou valor = dicionario.pop('chave'); # valor é o valor associado à chave removida."
      },
      {
        "id": 18,
        "questionText": "O que faz o método pop() de uma lista em Python?",
        "options": [
          { "id": 1, "text": "Remove e retorna o último item da lista", "isCorrect": true },
          { "id": 2, "text": "Remove e retorna o primeiro item da lista", "isCorrect": false },
          { "id": 3, "text": "Remove e retorna um item específico da lista", "isCorrect": true },
          { "id": 4, "text": "Remove um item específico da lista sem retorná-lo", "isCorrect": false }
        ],
        "explanation": "O método pop() remove e retorna o item em uma posição específica da lista, ou o último item se nenhum índice for especificado. Exemplo: lista = [1, 2, 3]; item = lista.pop(); # item é 3, e lista é [1, 2]."
      },
      {
        "id": 19,
        "questionText": "Como você ordena uma lista em Python?",
        "options": [
          { "id": 1, "text": "lista.sort()", "isCorrect": true },
          { "id": 2, "text": "lista.order()", "isCorrect": false },
          { "id": 3, "text": "sorted(lista)", "isCorrect": true },
          { "id": 4, "text": "lista.arrange()", "isCorrect": false }
        ],
        "explanation": "Você pode ordenar uma lista usando o método sort() ou a função sorted(). Exemplo: lista = [3, 1, 2]; lista.sort(); # lista é [1, 2, 3]. Ou: lista = sorted(lista); # lista é [1, 2, 3]."
      },
      {
        "id": 20,
        "questionText": "Como você cria um loop for em Python?",
        "options": [
          { "id": 1, "text": "for item in lista:", "isCorrect": true },
          { "id": 2, "text": "loop item in lista:", "isCorrect": false },
          { "id": 3, "text": "foreach item in lista:", "isCorrect": false },
          { "id": 4, "text": "for each item in lista:", "isCorrect": false }
        ],
        "explanation": "Você cria um loop for em Python usando a sintaxe \"for item in lista:\". Exemplo: for item in [1, 2, 3]: print(item); # Imprime 1, 2, 3."
      },
      {
        "id": 21,
        "questionText": "Qual é a diferença entre '==' e 'is' em Python?",
        "options": [
          { "id": 1, "text": "'==' compara valores e 'is' compara identidade de objetos", "isCorrect": true },
          { "id": 2, "text": "'==' compara identidade de objetos e 'is' compara valores", "isCorrect": false },
          { "id": 3, "text": "'==' e 'is' são equivalentes", "isCorrect": false },
          { "id": 4, "text": "'==' é usado para tipos primitivos e 'is' para objetos compostos", "isCorrect": false }
        ],
        "explanation": "'==' compara os valores de dois objetos, enquanto 'is' compara se dois objetos são o mesmo objeto na memória. Exemplo: a = [1, 2]; b = [1, 2]; a == b # True, a is b # False."
      },
      {
        "id": 22,
        "questionText": "Como você define uma função em Python?",
        "options": [
          { "id": 1, "text": "def nome_funcao():", "isCorrect": true },
          { "id": 2, "text": "function nome_funcao():", "isCorrect": false },
          { "id": 3, "text": "func nome_funcao():", "isCorrect": false },
          { "id": 4, "text": "define nome_funcao():", "isCorrect": false }
        ],
        "explanation": "Você define uma função em Python usando a palavra-chave 'def'. Exemplo: def saudacao(nome): return 'Olá, ' + nome; # Chame saudacao('Maria') para obter 'Olá, Maria'."
      },
      {
        "id": 23,
        "questionText": "O que é uma expressão lambda em Python?",
        "options": [
          { "id": 1, "text": "Uma função anônima de uma única linha", "isCorrect": true },
          { "id": 2, "text": "Uma variável global", "isCorrect": false },
          { "id": 3, "text": "Um tipo de loop", "isCorrect": false },
          { "id": 4, "text": "Uma função com nome", "isCorrect": false }
        ],
        "explanation": "Uma expressão lambda é uma função anônima de uma única linha. Exemplo: soma = lambda a, b: a + b; # soma(2, 3) retorna 5."
      },
      {
        "id": 24,
        "questionText": "Como você faz a manipulação de exceções em Python?",
        "options": [
          { "id": 1, "text": "try...catch", "isCorrect": false },
          { "id": 2, "text": "try...except", "isCorrect": true },
          { "id": 3, "text": "catch...finally", "isCorrect": false },
          { "id": 4, "text": "try...finally", "isCorrect": false }
        ],
        "explanation": "Em Python, a manipulação de exceções é feita usando 'try...except'. Exemplo: try: x = 1 / 0; except ZeroDivisionError: print('Divisão por zero!')."
      },
      {
        "id": 25,
        "questionText": "O que faz o método 'strip()' em uma string Python?",
        "options": [
          { "id": 1, "text": "Remove espaços no início e no fim da string", "isCorrect": true },
          { "id": 2, "text": "Remove espaços apenas no início da string", "isCorrect": false },
          { "id": 3, "text": "Remove espaços apenas no fim da string", "isCorrect": false },
          { "id": 4, "text": "Remove todos os espaços da string", "isCorrect": false }
        ],
        "explanation": "O método 'strip()' remove espaços no início e no fim da string. Exemplo: texto = '  Olá  '; texto.strip() # 'Olá'."
      },
      {
        "id": 26,
        "questionText": "Como você converte uma string para um número inteiro em Python?",
        "options": [
          { "id": 1, "text": "int(string)", "isCorrect": true },
          { "id": 2, "text": "string.toInt()", "isCorrect": false },
          { "id": 3, "text": "convert(string, int)", "isCorrect": false },
          { "id": 4, "text": "parseInt(string)", "isCorrect": false }
        ],
        "explanation": "Você converte uma string para um número inteiro usando a função 'int()'. Exemplo: numero = int('123'); # numero é 123."
      },
      {
        "id": 27,
        "questionText": "Como você verifica se uma chave existe em um dicionário em Python?",
        "options": [
          { "id": 1, "text": "dicionario.has_key(chave)", "isCorrect": false },
          { "id": 2, "text": "chave in dicionario", "isCorrect": true },
          { "id": 3, "text": "dicionario.contains(chave)", "isCorrect": false },
          { "id": 4, "text": "dicionario.exists(chave)", "isCorrect": false }
        ],
        "explanation": "Você verifica se uma chave existe em um dicionário usando a sintaxe 'chave in dicionario'. Exemplo: chave_existe = 'nome' in dicionario; # True se a chave 'nome' estiver no dicionário."
      },
      {
        "id": 28,
        "questionText": "O que faz o método 'append()' em uma lista Python?",
        "options": [
          { "id": 1, "text": "Adiciona um item ao início da lista", "isCorrect": false },
          { "id": 2, "text": "Adiciona um item ao fim da lista", "isCorrect": true },
          { "id": 3, "text": "Remove um item do fim da lista", "isCorrect": false },
          { "id": 4, "text": "Remove um item do início da lista", "isCorrect": false }
        ],
        "explanation": "O método 'append()' adiciona um item ao fim da lista. Exemplo: lista = [1, 2]; lista.append(3); # lista é [1, 2, 3]."
      },
      {
        "id": 29,
        "questionText": "Como você cria uma classe em Python?",
        "options": [
          { "id": 1, "text": "class NomeClasse:", "isCorrect": true },
          { "id": 2, "text": "create class NomeClasse:", "isCorrect": false },
          { "id": 3, "text": "define class NomeClasse:", "isCorrect": false },
          { "id": 4, "text": "new class NomeClasse:", "isCorrect": false }
        ],
        "explanation": "Você cria uma classe em Python usando a palavra-chave 'class'. Exemplo: class Pessoa: def __init__(self, nome): self.nome = nome; # Cria a classe Pessoa com um atributo nome."
      },
      {
        "id": 30,
        "questionText": "Como você cria uma instância de uma classe em Python?",
        "options": [
          { "id": 1, "text": "classe()", "isCorrect": true },
          { "id": 2, "text": "new classe()", "isCorrect": false },
          { "id": 3, "text": "classe.create()", "isCorrect": false },
          { "id": 4, "text": "classe.new()", "isCorrect": false }
        ],
        "explanation": "Você cria uma instância de uma classe chamando o nome da classe como uma função. Exemplo: pessoa = Pessoa('Maria'); # Cria uma instância da classe Pessoa com o nome 'Maria'."
      },
      {
        "id": 31,
        "questionText": "Qual biblioteca em Python é comumente usada para web scraping?",
        "options": [
          { "id": 1, "text": "Requests", "isCorrect": false },
          { "id": 2, "text": "BeautifulSoup", "isCorrect": true },
          { "id": 3, "text": "Pandas", "isCorrect": false },
          { "id": 4, "text": "Matplotlib", "isCorrect": false }
        ],
        "explanation": "BeautifulSoup é uma biblioteca amplamente usada para web scraping em Python, permitindo a análise e extração de dados HTML e XML. Exemplo: soup = BeautifulSoup(html, 'html.parser'); # Análise de conteúdo HTML."
      },
      {
        "id": 32,
        "questionText": "Qual é a função principal da biblioteca 'Requests' em Python no contexto de web scraping?",
        "options": [
          { "id": 1, "text": "Analisar HTML", "isCorrect": false },
          { "id": 2, "text": "Fazer requisições HTTP", "isCorrect": true },
          { "id": 3, "text": "Criar gráficos", "isCorrect": false },
          { "id": 4, "text": "Gerenciar bancos de dados", "isCorrect": false }
        ],
        "explanation": "A biblioteca 'Requests' é usada para fazer requisições HTTP, o que é essencial para obter o conteúdo das páginas da web a serem analisadas. Exemplo: response = requests.get(url); # Faz uma requisição GET para a URL."
      },
      {
        "id": 33,
        "questionText": "Qual método da biblioteca 'BeautifulSoup' é utilizado para encontrar todas as tags de um determinado tipo?",
        "options": [
          { "id": 1, "text": "find_all()", "isCorrect": true },
          { "id": 2, "text": "find_tag()", "isCorrect": false },
          { "id": 3, "text": "search()", "isCorrect": false },
          { "id": 4, "text": "get_tags()", "isCorrect": false }
        ],
        "explanation": "O método 'find_all()' da biblioteca BeautifulSoup é usado para encontrar todas as tags de um determinado tipo dentro do conteúdo HTML. Exemplo: tags = soup.find_all('a'); # Encontra todas as tags <a>."
      },
      {
        "id": 34,
        "questionText": "Como você pode lidar com JavaScript em uma página ao fazer web scraping?",
        "options": [
          { "id": 1, "text": "Usar apenas BeautifulSoup", "isCorrect": false },
          { "id": 2, "text": "Usar Selenium", "isCorrect": true },
          { "id": 3, "text": "Usar Requests", "isCorrect": false },
          { "id": 4, "text": "Usar apenas Regex", "isCorrect": false }
        ],
        "explanation": "Para lidar com conteúdo gerado por JavaScript, você pode usar a biblioteca Selenium, que permite automatizar navegadores e interagir com páginas dinâmicas. Exemplo: driver = webdriver.Chrome(); driver.get(url); # Usa Selenium para acessar e interagir com a página."
      },
      {
        "id": 35,
        "questionText": "Qual método da biblioteca 'BeautifulSoup' é usado para encontrar uma única tag?",
        "options": [
          { "id": 1, "text": "find()", "isCorrect": true },
          { "id": 2, "text": "find_one()", "isCorrect": false },
          { "id": 3, "text": "get()", "isCorrect": false },
          { "id": 4, "text": "search()", "isCorrect": false }
        ],
        "explanation": "O método 'find()' da BeautifulSoup é usado para encontrar uma única tag que corresponde aos critérios especificados. Exemplo: tag = soup.find('h1'); # Encontra a primeira tag <h1>."
      },
      {
        "id": 36,
        "questionText": "Qual biblioteca em Python pode ser usada para lidar com cookies em web scraping?",
        "options": [
          { "id": 1, "text": "Requests", "isCorrect": true },
          { "id": 2, "text": "Selenium", "isCorrect": false },
          { "id": 3, "text": "BeautifulSoup", "isCorrect": false },
          { "id": 4, "text": "Pandas", "isCorrect": false }
        ],
        "explanation": "A biblioteca 'Requests' pode ser usada para lidar com cookies, permitindo a manutenção do estado de sessão em web scraping. Exemplo: response = requests.get(url, cookies=cookies); # Envia cookies junto com a requisição."
      },
      {
        "id": 37,
        "questionText": "Como você pode evitar a detecção e bloqueio ao fazer web scraping em um site?",
        "options": [
          { "id": 1, "text": "Usar proxies e rotacionar IPs", "isCorrect": true },
          { "id": 2, "text": "Enviar requisições muito rápidas", "isCorrect": false },
          { "id": 3, "text": "Ignorar cabeçalhos HTTP", "isCorrect": false },
          { "id": 4, "text": "Usar sempre o mesmo User-Agent", "isCorrect": false }
        ],
        "explanation": "Para evitar a detecção e bloqueio, você pode usar proxies e rotacionar IPs para distribuir suas requisições. Exemplo: Use uma lista de proxies e alterne entre eles para reduzir a probabilidade de bloqueio."
      },
      {
        "id": 38,
        "questionText": "Qual biblioteca você pode usar para armazenar e manipular dados extraídos de web scraping em formato tabular?",
        "options": [
          { "id": 1, "text": "Requests", "isCorrect": false },
          { "id": 2, "text": "BeautifulSoup", "isCorrect": false },
          { "id": 3, "text": "Pandas", "isCorrect": true },
          { "id": 4, "text": "Selenium", "isCorrect": false }
        ],
        "explanation": "A biblioteca 'Pandas' é útil para armazenar e manipular dados extraídos em formato tabular, como DataFrames. Exemplo: df = pd.DataFrame(dados); # Cria um DataFrame com dados extraídos."
      },
      {
        "id": 39,
        "questionText": "Como você pode extrair o texto de um elemento HTML usando BeautifulSoup?",
        "options": [
          { "id": 1, "text": "element.text", "isCorrect": true },
          { "id": 2, "text": "element.get_text()", "isCorrect": true },
          { "id": 3, "text": "element.innerHTML", "isCorrect": false },
          { "id": 4, "text": "element.html()", "isCorrect": false }
        ],
        "explanation": "Você pode extrair o texto de um elemento HTML usando os métodos 'text' ou 'get_text()' do BeautifulSoup. Exemplo: texto = elemento.get_text(); # Extrai o texto do elemento."
      },
      {
        "id": 40,
        "questionText": "Como você pode definir um User-Agent personalizado ao fazer uma requisição HTTP em Python?",
        "options": [
          { "id": 1, "text": "headers={'User-Agent': 'valor'}", "isCorrect": true },
          { "id": 2, "text": "user_agent='valor'", "isCorrect": false },
          { "id": 3, "text": "request.set_user_agent('valor')", "isCorrect": false },
          { "id": 4, "text": "user_agent.set('valor')", "isCorrect": false }
        ],
        "explanation": "Para definir um User-Agent personalizado, você deve incluir o cabeçalho 'User-Agent' na requisição HTTP. Exemplo: response = requests.get(url, headers={'User-Agent': 'Meu User-Agent'}); # Define um User-Agent personalizado na requisição."
      },
      {
        "id": 41,
        "questionText": "Qual é a função principal da biblioteca Selenium em Python?",
        "options": [
          { "id": 1, "text": "Manipular arquivos CSV", "isCorrect": false },
          { "id": 2, "text": "Automatizar interações com navegadores web", "isCorrect": true },
          { "id": 3, "text": "Analisar dados JSON", "isCorrect": false },
          { "id": 4, "text": "Criar gráficos", "isCorrect": false }
        ],
        "explanation": "A biblioteca Selenium é usada para automatizar interações com navegadores web, permitindo a simulação de ações de usuário e teste de aplicativos web. Exemplo: driver = webdriver.Chrome(); driver.get(url); # Automatiza a navegação para a URL."
      },
      {
        "id": 42,
        "questionText": "Como você inicializa o navegador Chrome usando Selenium?",
        "options": [
          { "id": 1, "text": "webdriver.Chrome()", "isCorrect": true },
          { "id": 2, "text": "webdriver.Firefox()", "isCorrect": false },
          { "id": 3, "text": "webdriver.Edge()", "isCorrect": false },
          { "id": 4, "text": "webdriver.Safari()", "isCorrect": false }
        ],
        "explanation": "Para inicializar o navegador Chrome, você deve usar a classe 'webdriver.Chrome()'. Exemplo: driver = webdriver.Chrome(); # Inicializa o navegador Chrome."
      },
      {
        "id": 43,
        "questionText": "Como você encontra um elemento por seu ID usando Selenium?",
        "options": [
          { "id": 1, "text": "driver.find_element_by_id('id')", "isCorrect": true },
          { "id": 2, "text": "driver.get_element_by_id('id')", "isCorrect": false },
          { "id": 3, "text": "driver.locate_element_by_id('id')", "isCorrect": false },
          { "id": 4, "text": "driver.find_by_id('id')", "isCorrect": false }
        ],
        "explanation": "Para encontrar um elemento por seu ID, você usa o método 'find_element_by_id()'. Exemplo: elemento = driver.find_element_by_id('id'); # Encontra o elemento com o ID especificado."
      },
      {
        "id": 44,
        "questionText": "Qual método do Selenium é usado para clicar em um elemento?",
        "options": [
          { "id": 1, "text": "element.click()", "isCorrect": true },
          { "id": 2, "text": "element.press()", "isCorrect": false },
          { "id": 3, "text": "element.submit()", "isCorrect": false },
          { "id": 4, "text": "element.select()", "isCorrect": false }
        ],
        "explanation": "O método 'click()' é usado para clicar em um elemento. Exemplo: elemento.click(); # Executa um clique no elemento encontrado."
      },
      {
        "id": 45,
        "questionText": "Como você envia texto para um campo de entrada usando Selenium?",
        "options": [
          { "id": 1, "text": "element.send_keys('texto')", "isCorrect": true },
          { "id": 2, "text": "element.type('texto')", "isCorrect": false },
          { "id": 3, "text": "element.input('texto')", "isCorrect": false },
          { "id": 4, "text": "element.insert('texto')", "isCorrect": false }
        ],
        "explanation": "Para enviar texto para um campo de entrada, você usa o método 'send_keys()'. Exemplo: elemento.send_keys('texto'); # Envia o texto para o campo de entrada."
      },
      {
        "id": 46,
        "questionText": "Qual método do Selenium você usa para esperar que um elemento esteja visível?",
        "options": [
          { "id": 1, "text": "WebDriverWait", "isCorrect": true },
          { "id": 2, "text": "driver.wait_for()", "isCorrect": false },
          { "id": 3, "text": "driver.pause()", "isCorrect": false },
          { "id": 4, "text": "element.wait()", "isCorrect": false }
        ],
        "explanation": "O 'WebDriverWait' é usado para esperar que um elemento esteja visível ou que uma condição específica seja atendida. Exemplo: wait = WebDriverWait(driver, 10); elemento = wait.until(EC.visibility_of_element_located((By.ID, 'id'))); # Espera até que o elemento esteja visível."
      },
      {
        "id": 47,
        "questionText": "Como você fecha o navegador usando Selenium?",
        "options": [
          { "id": 1, "text": "driver.close()", "isCorrect": true },
          { "id": 2, "text": "driver.quit()", "isCorrect": true },
          { "id": 3, "text": "driver.exit()", "isCorrect": false },
          { "id": 4, "text": "driver.stop()", "isCorrect": false }
        ],
        "explanation": "Os métodos 'close()' e 'quit()' são usados para fechar o navegador. 'close()' fecha a aba atual, enquanto 'quit()' encerra completamente o navegador. Exemplo: driver.quit(); # Fecha o navegador e encerra a sessão."
      },
      {
        "id": 48,
        "questionText": "Qual classe do Selenium é usada para selecionar elementos por CSS selector?",
        "options": [
          { "id": 1, "text": "By.CSS_SELECTOR", "isCorrect": true },
          { "id": 2, "text": "By.CLASS_NAME", "isCorrect": false },
          { "id": 3, "text": "By.XPATH", "isCorrect": false },
          { "id": 4, "text": "By.ID", "isCorrect": false }
        ],
        "explanation": "A classe 'By.CSS_SELECTOR' é usada para selecionar elementos usando seletores CSS. Exemplo: elemento = driver.find_element(By.CSS_SELECTOR, 'seletor'); # Encontra o elemento com base no seletor CSS."
      },
      {
        "id": 49,
        "questionText": "Como você navega para uma nova URL usando Selenium?",
        "options": [
          { "id": 1, "text": "driver.get('url')", "isCorrect": true },
          { "id": 2, "text": "driver.navigate_to('url')", "isCorrect": false },
          { "id": 3, "text": "driver.open('url')", "isCorrect": false },
          { "id": 4, "text": "driver.load('url')", "isCorrect": false }
        ],
        "explanation": "Para navegar para uma nova URL, você usa o método 'get()'. Exemplo: driver.get('https://www.exemplo.com'); # Navega para a URL especificada."
      },
      {
        "id": 50,
        "questionText": "Qual biblioteca adicional pode ser necessária para usar o Selenium com o navegador Chrome?",
        "options": [
          { "id": 1, "text": "chromedriver", "isCorrect": true },
          { "id": 2, "text": "geckodriver", "isCorrect": false },
          { "id": 3, "text": "edgedriver", "isCorrect": false },
          { "id": 4, "text": "safaridriver", "isCorrect": false }
        ],
        "explanation": "Para usar o Selenium com o navegador Chrome, você precisa do 'chromedriver', que é o driver necessário para controlar o Chrome. Exemplo: Baixe o chromedriver e configure-o no PATH do sistema."
      }
    ]
  }
  